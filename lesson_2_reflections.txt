What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, git creates a metadata file that will begin to store all of
your commits to the involved files.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area offers a 'cache' of sorts that allows you to commit only certain files, not necessarily everything
in the working directory.

How can you use the staging area to make sure you have one commit per logical change?

Before loading something to the stage, ensure that the diff btwn the stage and the most recent
commit is either nonexistent or negligible. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches will be helpful for creating different versions of your code - so large, over-arching 
changes such as difficulty levels (for games), language (for games/websites), etc.	

How do the diagrams help you visualize the branch structure?

Very well, thanks.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is the addition of new commits from both branches being included in the master branch. 
The new branch therefore becomes irrelevant and can be deleted.